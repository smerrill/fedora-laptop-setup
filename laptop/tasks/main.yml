# tasks file for laptop
#- name: install some dependencies by hand
  #raw: 'dnf install -y yum python-dnf libselinux-python'
- name: install RPMFusion and Infinality repos
  dnf:
    name: "{{ item }}"
    state: installed
  with_items:
    - "http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-{{ ansible_distribution_version }}.noarch.rpm"
    - "http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-{{ ansible_distribution_version }}.noarch.rpm"
    #- "http://rpm.danielrenninghoff.com/fedora/{{ ansible_distribution_version }}/noarch/infinality-ultimate-repo-{{ ansible_distribution_version }}-2.noarch.rpm"
    - libselinux-python
- name: upgrade all packages
  dnf:
    name: '*'
    state: latest
#- name: install Google Chrome
  #dnf:
    #pkg: https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
    #state: installed
#- name: download Oracle Java
  #shell: 'curl -v -j -k -L -H "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u102-b14/jdk-8u102-linux-x64.rpm > /tmp/oraclejava.rpm'
  #args:
    #creates: /tmp/oraclejava.rpm
- name: create Applications folder
  file:
    path: "/home/{{ account }}/Applications/"
    state: directory
    owner: "{{ account }}"
    group: "{{ account }}"
- name: download Minecraft
  get_url:
    url: https://s3.amazonaws.com/Minecraft.Download/launcher/Minecraft.jar
    dest: "/home/{{ account }}/Applications/"
- name: install base packages
  dnf:
    name: "{{ item }}"
    state: installed
  with_items:
    - htop
    - pv
    - vim-enhanced
    - git
    - tmux
    - pigz
    - rxvt-unicode
    - rxvt-unicode-256color-ml
    - man
    - zip
    - unzip
    - wget
    - curl
    - bind-utils
    - bash-completion
    - lbzip2
    - bzip2
    - python-pip
    - docker-io
    - gnome-tweak-tool
    - tlp
    - powertop
    - smartmontools
    - '@Development Tools'
    - redhat-rpm-config
    - xsel
    #- '/tmp/oraclejava.rpm'
    - the_silver_searcher
    #- profile-sync-daemon
    - vagrant-lxc
    - vagrant-libvirt
    - lxc
    - lxc-extra
    - lxc-templates
    - shutter
    - f2fs-tools
    - virt-manager
    - freetype-freeworld
- name: install Go
  dnf:
    name: "{{ item }}"
    state: installed
  with_items:
    - golang
- name: install Leiningen for Clojure dev
  get_url:
    url: https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
    dest: "/home/{{ account }}/bin/lein"
    mode: 0755
#- name: load the overlay module at boot
  #copy:
    #dest: /etc/modules-load.d/overlay.conf
    #content: overlay
#- name: load the overlay module now
  #shell: 'modprobe overlay'
#- name: copy the PSD configuration
  #copy:
    #src: psd.conf
    #dest: /etc/psd.conf
#- name: start and enable PSD
  #service:
    #name: psd
    #state: started
    #enabled: yes
- name: copy the TLP configuration
  copy:
    src: tlp
    dest: /etc/default/tlp
- name: start and enable tlp
  service:
    name: tlp
    state: started
    enabled: yes
- name: run and enable libvirt
  service:
    name: libvirtd
    state: started
    enabled: yes
- name: allow users in the wheel group to use libvirt
  copy:
    dest: /etc/polkit-1/rules.d/10-libvirt-wheel.rules
    content: 'polkit.addRule(function(action, subject) { if (action.id == "org.libvirt.unix.manage" && subject.isInGroup("wheel")) { return polkit.Result.YES; }});'
- name: configure LXC to use the libvirt bridge
  copy:
    src: default.conf
    dest: /etc/lxc/default.conf
- name: set my shell to zsh
  user:
    name: "{{ account }}"
    shell: /usr/bin/zsh
- name: create a docker group
  group:
    name: docker
    gid: 498
- name: put me in the docker, wheel, and vagrant groups
  user:
    name: "{{ account }}"
    groups: docker,wheel,vagrant
- name: copy the Docker configuration
  copy:
    src: docker
    dest: /etc/sysconfig/docker
- name: run and enable the docker daemon
  service:
    name: docker
    state: started
    enabled: yes
#- name: create the Terraform folder
  #file:
    #path: /opt/terraform
    #state: directory
#- name: download Terraform
  #get_url:
    #url: https://releases.hashicorp.com/terraform/0.7.2/terraform_0.7.2_linux_amd64.zip
    #dest: /opt/terraform/terraform.zip
#- name: expand Terraform
  #unarchive:
    #src: /opt/terraform/terraform.zip
    #dest: /opt/terraform/
#- name: copy Terraform binaries into place
  #copy:
    #src: "{{ item }}"
    #dest: "/home/{{ account }}/bin/"
    #owner: "{{ account }}"
    #group: "{{ account }}"
    #mode: 0755
  #with_fileglob:
    #- /opt/terraform/terraform
    #- /opt/terraform/terraform-*
#- name: create the Packer folder
  #file:
    #path: /opt/packer
    #state: directory
#- name: download Packer
  #get_url:
    #url: https://releases.hashicorp.com/packer/0.10.1/packer_0.10.1_linux_amd64.zip
    #dest: /opt/packer/packer.zip
#- name: expand Packer
  #unarchive:
    #src: /opt/packer/packer.zip
    #dest: /opt/packer/
#- name: copy Packer binaries into place
  #copy:
    #src: "{{ item }}"
    #dest: "/home/{{ account }}/bin/"
    #owner: "{{ account }}"
    #group: "{{ account }}"
    #mode: 0755
  #with_fileglob:
    #- /opt/packer/packer
    #- /opt/packer/packer-*
#- name: create the Fleet folder
  #file:
    #path: /opt/fleet
    #state: directory
#- name: download Fleet
  #get_url:
    #url: https://github.com/coreos/fleet/releases/download/v0.11.8/fleet-v0.11.8-linux-amd64.tar.gz
    #dest: /opt/fleet/fleet.zip
#- name: expand Fleet
  #unarchive:
    #src: /opt/fleet/fleet.zip
    #dest: /opt/fleet/
#- name: copy Fleet binaries into place
  #copy:
    #src: "{{ item }}"
    #dest: "/home/{{ account }}/bin/"
    #owner: "{{ account }}"
    #group: "{{ account }}"
    #mode: 0755
  #with_fileglob:
    #- /opt/fleet/fleet*/fleet*
# Yes, done with shell for now because of --allowerasing
#- name: install Infinality
  #shell: 'dnf -y install --allowerasing cairo-infinality-ultimate fontconfig-infinality-ultimate freetype-infinality-ultimate'
#- name: install Infinality fonts
  #shell: 'dnf -y install --allowerasing ibfonts-meta-base ibfonts-meta-extended-lt ibfonts-meta-extended'
#- name: install Infinality Java
  #shell: 'dnf -y install --allowerasing java-1.8.0-openjdk-infinality-ultimate-headless java-1.8.0-openjdk-infinality-ultimate-devel'
#- name: set up custom font substitutions
  #copy:
    #src: 35-repl-custom.conf
    #dest: /usr/share/fontconfig/conf.avail.infinality/35-repl-custom.conf
- name: install fonts
  dnf:
    name: "{{ item }}"
    state: installed
  with_items:
    - google-roboto-fonts
    - google-roboto-mono-fonts
    - google-roboto-slab-fonts
    - google-roboto-condensed-fonts
    - google-croscore-arimo-fonts
    - google-croscore-tinos-fonts
    - google-croscore-cousine-fonts
    - google-croscore-symbolneu-fonts
- name: download Input fonts
  get_url:
    url: 'http://input.fontbureau.com/build/?fontSelection=whole&a=ss&g=ss&i=serif&l=serif&zero=slash&asterisk=0&braces=0&preset=default&line-height=1&accept=I+do&email='
    dest: "/home/{{ account }}/Downloads/input-fonts.zip"
    timeout: 90
- name: create the fonts directory
  file:
    dest: "/home/{{ account }}/.fonts/input"
    owner: "{{ account }}"
    group: "{{ account }}"
    state: directory
    recurse: true
- name: expand Input fonts
  unarchive:
    src: "/home/{{ account }}/Downloads/input-fonts.zip"
    dest: "/home/{{ account }}/.fonts/input/"

# @TODO: Make Dan Walsh sad?
